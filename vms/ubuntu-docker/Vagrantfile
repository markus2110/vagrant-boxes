# -*- mode: ruby -*-
# vi: set ft=ruby :
require './config.rb'

# All Vagrant configuration is done below. The '2' in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure($VAGRANTFILE_API_VERSION) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = $VAGRANTFILE_BOX

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # . This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing 'localhost:8080' will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  $VM_PORT_FORWARDING.each do |portConfig|
    config.vm.network 'forwarded_port', guest: portConfig[:GUEST_PORT], host: portConfig[:HOST_PORT]
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network 'forwarded_port', guest: 80, host: 8080, host_ip: '127.0.0.1'

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network 'private_network', ip: $VAGRANTFILE_NETWORK_IP

  # The hostname the machine should have. Defaults to nil. If nil, Vagrant will not manage the hostname.
  # If set to a string, the hostname will be set on boot. 
  # If set, Vagrant will update /etc/hosts on the guest with the configured hostname.
  config.vm.hostname = $VM_NAME

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network 'public_network'

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  $VM_SYNC_FOLDERS.each do |syncConfig|
    config.vm.synced_folder syncConfig[:HOST_PATH], syncConfig[:GUEST_PATH],
        type: syncConfig[:TYPE],
        linux__nfs_options: ['rw','no_subtree_check','all_squash','async']
  end


  #f true, agent forwarding over SSH connections is enabled. Defaults to false.
  config.ssh.forward_agent = $VAGRANTFILE_SSH_AGENT_FORWARD

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider 'virtualbox' do |vb|
    # The display name at the GUI
    vb.name = $VM_NAME
    # Display the VirtualBox GUI when booting the machine
    vb.gui = $VM_SHOW_GUI
    # Customize the amount of memory on the VM:
    vb.memory = $VM_MEMORY
    # Customize the amount of CPUS to use by the VM:
    vb.cpus = $VM_CPUS

#    vb.linked_clone = true
  end

  # hosts settings (host machine)
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = false
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true
  config.hostmanager.aliases = $HOSTS.values

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision 'chef_solo' do |chef|
     chef.cookbooks_path =  $CHEF_COOKBOOKS
     chef.run_list =        $CHEF_RECIPES
#     chef.json = $CHEF_ATTRIBUTES
   end
end

